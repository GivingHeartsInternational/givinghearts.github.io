{"version":3,"sources":["components/TypeSelect.js","components/PokemonItem.js","components/PokemonCard.js","components/Pokedex.js","App.js","index.js"],"names":["TypeSelect","props","useState","types","setTypes","useEffect","fetch","then","response","json","result","className","name","onChange","e","setType","target","value","setCount","results","map","item","PokemonItem","setItem","load","setLoad","imageId","id","slice","imageUrl2","url","onClick","setCard","onLoad","alt","src","style","display","type","PokemonCard","card","setComma","length","index","stats","str","stat","toUpperCase","replace","base_stat","weight","moves","Pokedex","count","items","setItems","urlAll","find","resultObject","pokemon","forEach","push","limitedItems","fetchByType","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKA2CeA,EArCI,SAACC,GAEnB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAJAC,qBAAU,WAbTC,MAHa,kCAIVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACLN,EAASM,QAYV,IAGF,mCAEC,yBAAQC,UAAU,cAAcC,KAAK,cAAcC,SAbpC,SAACC,GACjBb,EAAMc,QAAQD,EAAEE,OAAOC,OACvBhB,EAAMiB,SAAS,KAWd,UACC,wBAAQD,MAAM,MAAd,iBACCd,EAAMgB,SAAWhB,EAAMgB,QAAQC,KAAI,SAACC,GAAD,OACnC,wBAAwBJ,MAAOI,EAAKT,KAApC,SAA2CS,EAAKT,MAAnCS,EAAKT,eCORU,EArCK,SAACrB,GAEpB,MAAwBC,mBAAS,IAAjC,mBAAOmB,EAAP,KAAaE,EAAb,KACA,EAAwBrB,oBAAS,GAAjC,mBAAOsB,EAAP,KAAaC,EAAb,KAIMC,GAFQ,wDAAoDL,EAAKM,GAAzD,SAEG,MAAQN,EAAKM,IAAIC,OAAO,IACnCC,EAAS,oEAAgEH,EAAhE,QAcf,OAJArB,qBAAU,WARQ,IAACyB,IASR7B,EAAM6B,IARhBxB,MAAMwB,GACHvB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACLa,EAAQb,QAMT,IAGF,sBAAmBC,UAAU,gBAAgBoB,QAAS,kBAAM9B,EAAM+B,QAAQX,IAA1E,UACC,qBAAKV,UAAU,cAAcsB,OAAQ,kBAAMR,GAAQ,IAAOS,IAAI,UAAUC,IAAKN,EAAWO,MAAO,CAACC,QAASb,EAAO,QAAU,UAC1H,qBAAKb,UAAU,YAAYyB,MAAO,CAACC,QAASb,EAAO,OAAS,WAE5D,6BAAKH,EAAKT,OACV,qBAAKD,UAAU,QAAf,SACEU,EAAKlB,OAASkB,EAAKlB,MAAMiB,KAAI,SAACC,GAAD,OAC7B,qBAA0BV,UAAS,sBAAiBU,EAAKiB,KAAK1B,MAA9D,SAAuES,EAAKiB,KAAK1B,MAAvES,EAAKiB,KAAK1B,aAPbS,EAAKM,KC2CFY,EAlEK,SAACtC,GAEN,wDAAoDA,EAAMuC,KAAKb,GAA/D,QAAd,IAEMD,GAAW,MAAQzB,EAAMuC,KAAKb,IAAIC,OAAO,GAEzCC,EAAS,oEAAgEH,EAAhE,QAWTe,EAAW,SAACC,EAAQC,GACzB,OAAOD,EAAS,IAAMC,GAAS,KAGhC,OACC,mCACE1C,EAAMuC,KAAKb,IACX,sBAAKhB,UAAU,gBAAf,UACC,8CACA,sBAAKA,UAAU,eAAf,UACA,sBAAKA,UAAU,aAAf,UACC,qBAAKA,UAAU,cAAeuB,IAAI,UAAUC,IAAKN,IACjD,+BAAK5B,EAAMuC,KAAK5B,KAAhB,KAAwBX,EAAMuC,KAAKb,SAEpC,qBAAKhB,UAAU,cAAf,SACA,gCACA,kCACC,+BACC,sCACA,6BACEV,EAAMuC,KAAKrC,MAAMiB,KAAI,SAACC,EAAMsB,GAAP,OACrB,uBAAMhC,UAAU,aAAhB,UAAmDU,EAAKiB,KAAK1B,KAAM6B,EAASxC,EAAMuC,KAAKrC,MAAMuC,OAAQC,KAAnEtB,EAAKiB,KAAK1B,cAI9CX,EAAMuC,KAAKI,MAAMxB,KAAI,SAAAC,GAAI,OAC1B,+BACC,8BAlCgBwB,EAkCExB,EAAKyB,KAAKlC,KAhCjCiC,GADAA,EAAMA,EAAI,GAAGE,cAAgBF,EAAIjB,MAAM,IAC7BoB,QAAQ,IAAK,QAiClB,6BAAK3B,EAAK4B,cAFF5B,EAAKyB,KAAKlC,MAjCH,IAACiC,KAsCjB,+BACC,wCACA,6BAAK5C,EAAMuC,KAAKU,YAEjB,+BACC,6CACA,6BAAKjD,EAAMuC,KAAKW,MAAMT,4BCkCdU,EApFC,SAACnD,GAEhB,MAA0BC,mBAAS,IAAnC,mBAAOmD,EAAP,KAAcnC,EAAd,KACA,EAA0BhB,mBAAS,IAAnC,mBAAOoD,EAAP,KAAcC,EAAd,KACA,EAAwBrD,mBAAS,IAAjC,mBAAOsC,EAAP,KAAaR,EAAb,KACA,EAAwB9B,mBAAS,OAAjC,mBAAOoC,EAAP,KAAavB,EAAb,KAEMyC,EAAM,mDAA+CH,GAwD3D,OAZAhD,qBAAU,WACG,QAATiC,EAxCHhC,MA0CUkD,GAzCPjD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL6C,EAAS7C,MAIO,SAAC4B,EAAMR,GAE1BxB,MAAMwB,GACHvB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,IAAMoB,EAAOpB,EAAOS,QAAQsC,MAAK,SAACpC,GACjC,OAAOA,EAAKT,OAAS0B,KAClBR,IAGJxB,MAAMwB,GACJvB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEL,IAAIgD,EAAe,GACfJ,EAAQ,GACZ5C,EAAOiD,QAAQC,SAAQ,SAACvC,GACvBiC,EAAMO,KAAKxC,EAAKsC,YAGjB,IAAIG,EAAeR,EAAM1B,MAAM,EAAGyB,GAClCK,EAAavC,QAAU2C,EACvBP,EAASG,SAiBbK,CAAYzB,EAlDD,oCAqDX,CAACe,EAAOf,IAGT,sBAAK3B,UAAU,UAAf,UACC,yCACA,sBAAKA,UAAU,kBAAf,UACC,sBAAKA,UAAU,gBAAf,UACC,cAAC,EAAD,CAAYI,QAASA,EAASG,SAAUA,IACxC,qBAAKP,UAAU,gBAAf,SACE2C,EAAMnC,SAAWmC,EAAK,QAAYlC,KAAI,SAACC,GAAD,OACtC,cAAC,EAAD,CAA6BS,IAAKT,EAAKS,IAAKE,QAASA,GAAnCX,EAAKT,WAGzB,wBAAQD,UAAU,WAAWoB,QA5Bb,WAEnBb,EADemC,EAtCE,KAiEd,qBAED,qBAAK1C,UAAU,iBAAf,SACC,cAAC,EAAD,CAAa6B,KAAMA,aC5ETwB,MARf,WACE,OACE,qBAAKrD,UAAU,MAAf,SACE,cAAC,EAAD,OCFNsD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.0dc05a45.chunk.js","sourcesContent":["/*\r\n* Display pokemon types\r\n*/\r\n\r\nimport React, {useEffect, useState} from 'react';\r\n\r\nconst TypeSelect = (props) => {\r\n\r\n\tconst [types, setTypes] = useState({});\r\n\r\n\tconst urlTypes = `https://pokeapi.co/api/v2/type`;\r\n\r\n\tconst fetchTypes = (url) => {\r\n\t\tfetch(url)\r\n\t  \t.then(response => response.json())\r\n\t  \t.then(result => {\r\n\t  \t\tsetTypes(result);\r\n\t  \t});\r\n\t}\r\n\r\n\tconst onChange = (e) => {\r\n\t\tprops.setType(e.target.value); \r\n\t\tprops.setCount(12);\r\n\t}\r\n\r\n\t//fetch types\r\n\tuseEffect(() => {\r\n\t\tfetchTypes(urlTypes);\r\n\t}, []);\r\n\r\n\treturn ( \r\n\t\t<>\r\n\t\t\t{/* on select - set type and restart count  */}\r\n\t\t\t<select className=\"type-select\" name='type-select' onChange={onChange}> \r\n\t\t\t\t<option value=\"all\">All</option>\r\n\t\t\t\t{types.results && types.results.map((item) => (\r\n\t\t\t\t\t<option key={item.name} value={item.name}>{item.name}</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t</>\r\n\t\t);\r\n}\r\n\r\nexport default TypeSelect;","/*\r\n* Display pokemon item in list\r\n*/\r\n\r\nimport React, {useEffect, useState} from 'react';\r\n\r\nconst PokemonItem = (props) => {\r\n\r\n\tconst [item, setItem] = useState({})\r\n\tconst [load, setLoad] = useState(false)\r\n\r\n\tconst imageUrl = `https://pokeres.bastionbot.org/images/pokemon/${item.id}.png`;\r\n\r\n\tconst imageId = ('000' + item.id).slice(-3);\r\n\tconst imageUrl2 = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${imageId}.png`;\r\n\r\n\tconst fetchItem = (url) => {\r\n\t\tfetch(url)\r\n\t\t  .then(response => response.json())\r\n\t\t  .then(result => {\r\n\t\t  \tsetItem(result)\r\n\t\t  });\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchItem(props.url);\r\n\t}, []);\r\n\r\n\treturn( \r\n\t\t<div key={item.id} className='pokedex__item' onClick={() => props.setCard(item)} >\r\n\t\t\t<img className=\"item__image\" onLoad={() => setLoad(true)} alt=\"pokemon\" src={imageUrl2} style={{display: load ? \"block\" : \"none\"}}  />\r\n\t\t\t<div className=\"preloader\" style={{display: load ? \"none\" : \"block\"}}></div>\r\n\r\n\t\t\t<h3>{item.name}</h3>\r\n\t\t\t<div className=\"types\">\r\n\t\t\t\t{item.types && item.types.map((item) => (\r\n\t\t\t\t\t<div key={item.type.name} className={`types__item ${item.type.name}`}>{item.type.name}</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n} \r\n\r\nexport default PokemonItem;\r\n","/*\r\n* Display pokemon card\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst PokemonCard = (props) => {\r\n\r\n\tconst imageUrl = `https://pokeres.bastionbot.org/images/pokemon/${props.card.id}.png`;\r\n\r\n\tconst imageId = ('000' + props.card.id).slice(-3);\r\n\t//alert(imageId);\r\n\tconst imageUrl2 = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${imageId}.png`;\r\n\r\n\r\n\t//format stat name\r\n\tconst formatString = (str) => {\r\n\t\tstr = str[0].toUpperCase() + str.slice(1);\r\n\t\tstr = str.replace('-', ' ');\r\n\t\treturn str;\r\n\t}\r\n\r\n\t// set comma in stat list\r\n\tconst setComma = (length, index) => {\r\n\t\treturn length - 1 !== index && \",\";\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{props.card.id && \r\n\t\t\t\t<div className=\"pokedex__card\">\r\n\t\t\t\t\t<h2>Pokemon Card</h2>\r\n\t\t\t\t\t<div className=\"card__layout\">\r\n\t\t\t\t\t<div className=\"card__left\">\r\n\t\t\t\t\t\t<img className=\"card__image\"  alt=\"pokemon\" src={imageUrl2}  />\r\n\t\t\t\t\t\t<h3>{props.card.name} #{props.card.id}</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"card__right\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t<tr> \r\n\t\t\t\t\t\t\t<td>Type</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t{props.card.types.map((item, index) => (\t\r\n\t\t\t\t\t\t\t\t\t<span className=\"card__type\" key={item.type.name}>{item.type.name}{setComma(props.card.types.length, index)}</span>))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t{props.card.stats.map(item => (\r\n\t\t\t\t\t\t<tr key={item.stat.name}>\r\n\t\t\t\t\t\t\t<td>{formatString(item.stat.name)}</td>\r\n\t\t\t\t\t\t\t<td>{item.base_stat}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>Weight</td>\r\n\t\t\t\t\t\t\t<td>{props.card.weight}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>Total Moves</td>\r\n\t\t\t\t\t\t\t<td>{props.card.moves.length}</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default PokemonCard;","/*\r\n* Display pokemon list\r\n*/\r\n\r\nimport React, {useEffect, useState} from 'react';\r\n\r\nimport TypeSelect from './TypeSelect';\r\nimport PokemonItem from './PokemonItem';\r\nimport PokemonCard from './PokemonCard';\r\n\r\nconst Pokedex = (props) => {\r\n\r\n\tconst [count, setCount] = useState(12);\r\n\tconst [items, setItems] = useState({});\r\n\tconst [card, setCard] = useState({});\r\n\tconst [type, setType] = useState('all');\r\n\r\n\tconst urlAll = `https://pokeapi.co/api/v2/pokemon/?limit=${count}`;\r\n\tconst urlType = `https://pokeapi.co/api/v2/type`;\r\n\tconst moreCount = 12;\r\n\r\n\tconst fetchAll = (url) => {\r\n\t\tfetch(url)\r\n\t\t  .then(response => response.json())\r\n\t\t  .then(result => {\r\n\t\t  \tsetItems(result)\r\n\t\t  }); \r\n\t}\r\n\r\n\tconst fetchByType = (type, url) => {\r\n\t\t//get type url by name\r\n\t\tfetch(url)\r\n\t\t  .then(response => response.json())\r\n\t\t  .then(result => {\r\n\t\t  \tconst url = (result.results.find((item) => {\r\n\t\t  \t\treturn item.name === type;\r\n\t\t  \t})).url;\r\n\r\n\t  \t\t//get list of pokemon items by type\r\n\t  \t\tfetch(url)\r\n\t\t\t  \t.then(response => response.json())\r\n\t\t\t  \t.then(result => {\r\n\t\t\t  \t\t\r\n\t\t\t\t  \tlet resultObject = {};\r\n\t\t\t\t  \tlet items = [];\r\n\t\t\t\t  \tresult.pokemon.forEach((item) => {\r\n\t\t\t\t  \t\titems.push(item.pokemon);\r\n\t\t\t\t  \t})\r\n\r\n\t\t\t\t  \tlet limitedItems = items.slice(0, count);\r\n\t\t\t\t  \tresultObject.results = limitedItems;\r\n\t\t\t\t \t\tsetItems(resultObject);\r\n\t\t\t  \t});\r\n\t\t  });\r\n\t}\r\n\r\n\tconst changeCount = () => {\r\n\t\tlet newCount = count + moreCount;\r\n\t\tsetCount(newCount);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif(type === \"all\") {\r\n\t\t\t//display all type\r\n\t\t\tfetchAll(urlAll);\r\n\t\t} \r\n\t\telse {\r\n\t \t\t//display specific type\r\n\t\t\tfetchByType(type, urlType);\r\n\t\t}\r\n\r\n}, [count, type]);\r\n\r\n\treturn (\r\n\t\t<div className=\"pokedex\">\r\n\t\t\t<h1>Pokedex</h1>\r\n\t\t\t<div className='pokedex__layout'>\r\n\t\t\t\t<div className=\"pokedex__left\">\r\n\t\t\t\t\t<TypeSelect setType={setType} setCount={setCount}/>\r\n\t\t\t\t\t<div className=\"pokedex__list\">\r\n\t\t\t\t\t\t{items.results && items['results'].map((item) => (\r\n\t\t\t\t\t\t\t<PokemonItem key={item.name} url={item.url} setCard={setCard} />\r\n\t\t\t\t\t\t))} \r\n\t\t\t\t\t</div>\t\r\n\t\t\t\t\t<button className=\"btn-load\" onClick={changeCount}>Load</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"pokedex__right\">\r\n\t\t\t\t\t<PokemonCard card={card}/> \r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Pokedex;","import './App.css';\nimport Pokedex from './components/Pokedex.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokedex />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}