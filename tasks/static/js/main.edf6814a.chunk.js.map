{"version":3,"sources":["components/TaskItem.js","components/TaskList.js","components/TaskDiagram.js","components/TaskNew.js","components/Tasks.js","App.js","index.js"],"names":["TaskItem","props","useState","edit","setEdit","task","name","newName","setNewName","style","className","done","draggable","id","type","onChange","setTaskStatus","checked","onClick","deleteTask","value","e","target","editTask","TaskList","onDragEnd","result","destination","reorder","tasks","source","index","droppableId","provided","snapshot","droppableProps","ref","innerRef","map","item","draggableId","toString","draggableProps","dragHandleProps","move","placeholder","TaskDiagram","setDone","barStyle","width","useEffect","allTasks","length","readyTasks","filter","percent","Math","round","TaskNew","setName","addTask","reset","Tasks","updateStorage","setState","localStorage","setItem","JSON","stringify","initial","storage","parse","getItem","state","Date","now","unshift","window","confirm","newTasks","i","order","doDelete","startIndex","endIndex","splice","removed","this","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NA+DeA,EA5DE,SAACC,GAChB,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAASD,EAAMI,KAAKC,MAAlD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,UA2BA,OACE,qBAAKC,UAAU,4BAAf,SACE,sBAAKA,UAAS,wBAAmBD,EAAnB,YAA4BR,EAAMI,KAAKM,KAAO,OAAS,IAAMC,UAAU,OAArF,WACGT,GACA,qCACC,sBAAKO,UAAU,cAAf,UACE,uBAAOJ,KAAML,EAAMI,KAAKQ,GAAIC,KAAK,WAAWC,SA/BtC,WACdd,EAAMe,cAAcf,EAAMI,KAAKQ,KA8BwCI,QAAShB,EAAMI,KAAKM,OACnF,6BAAKV,EAAMI,KAAKC,OACf,6BAAKL,EAAMI,KAAKM,UAGnB,sBAAKD,UAAU,gBAAf,UACE,wBAAQQ,QAxBD,WACfjB,EAAMkB,WAAWlB,EAAMI,KAAKQ,KAuBpB,oBACA,wBAAQK,QArBH,WACbd,GAASD,IAoBD,wBAKHA,GACC,sBAAKO,UAAU,aAAf,UACE,uBAAOI,KAAK,OAAOM,MAAOb,EAASQ,SAxB5B,SAACM,GAChBb,EAAWa,EAAEC,OAAOF,UAwBZ,wBAAQF,QA1CH,WACbd,GAAQ,GACRH,EAAMsB,SAAStB,EAAMI,KAAKQ,GAAIN,IAwCtB,kBACA,wBAAQW,QAtCF,WACdd,GAAQ,IAqCA,4B,OCKGoB,EAvDE,SAACvB,GAwBjB,OACG,cAAC,IAAD,CAAiBwB,UAvBD,SAAAC,GACXA,EAAOC,aAGZ1B,EAAM2B,QAAQ3B,EAAM4B,MAAOH,EAAOI,OAAOC,MAAOL,EAAOC,YAAYI,QAmBnE,SACE,cAAC,IAAD,CAAWC,YAAY,YAAvB,SACG,SAACC,EAAUC,GAAX,OACC,gDACMD,EAASE,gBADf,IAEEC,IAAKH,EAASI,SACd3B,UAAU,cAHZ,UAKGT,EAAM4B,MAAMS,KAAI,SAACC,EAAMR,GAAP,OACf,cAAC,IAAD,CAAyBS,YAAaD,EAAK1B,GAAG4B,WAAYV,MAAOA,EAAjE,SACG,SAACE,EAAUC,GAAX,OACG,yDACEE,IAAKH,EAASI,UACVJ,EAASS,gBACTT,EAASU,iBAHf,IAIEjC,UAAU,mBAJZ,SAME,cAAC,EAAD,CAAwBL,KAAMkC,EAAMpB,WAAYlB,EAAMkB,WAAYH,cAAef,EAAMe,cAAeO,SAAUtB,EAAMsB,SAAUqB,KAAM3C,EAAM2C,MAA7HL,EAAK1B,SARZ0B,EAAK1B,OAatBoB,EAASY,sBCxBPC,EA1BK,SAAC7C,GAEnB,MAAwBC,mBAAS,GAAjC,mBAAOS,EAAP,KAAaoC,EAAb,KAEMC,EAAW,CACfC,MAAM,GAAD,OAAKtC,EAAL,MAUP,OAPAuC,qBAAU,WACR,IAAMC,EAAWlD,EAAM4B,MAAMuB,QAAU,EACjCC,EAAcpD,EAAM4B,MAAMyB,QAAO,SAAAf,GAAI,OAAkB,IAAdA,EAAK5B,QAAiByC,OAC/DG,EAAUC,KAAKC,MAAoB,IAAbJ,EAAoBF,GAChDJ,EAAQQ,MAIR,qBAAK7C,UAAU,yBAAf,SACE,qBAAKA,UAAU,iBAAf,SACA,qBAAKA,UAAU,eAAeD,MAAOuC,EAArC,SACE,uBAAMtC,UAAU,kBAAhB,UAAmCC,EAAnC,KAA0C,uBAA1C,kBCQO+C,EA3BC,SAACzD,GACf,MAAwBC,mBAAS,IAAjC,mBAAOI,EAAP,KAAaqD,EAAb,KAeA,OACE,sBAAKjD,UAAU,aAAf,UACE,uBAAOI,KAAK,OAAOM,MAAOd,EAAMS,SAfnB,SAAAM,GACfsC,EAAQtC,EAAEC,OAAOF,QAcsCyB,YAAY,qBACjE,sBAAKnC,UAAU,iBAAf,UACE,wBAAQQ,QAbA,WACZjB,EAAM2D,QAAQtD,GACdqD,EAAQ,KAWJ,iBACA,wBAAQzC,QATE,WACdjB,EAAM4D,SAQF,0BC4EOC,E,kDA5Fb,WAAY7D,GAAQ,IAAD,8BACjB,cAAMA,IAUR8D,cAAgB,SAAClC,GACf,EAAKmC,SAAS,CAACnC,MAAOA,IACtBoC,aAAaC,QAAQ,QAASC,KAAKC,UAAUvC,KAb5B,EAgBnBwC,QAAU,WACR,IAAMC,EAAUH,KAAKI,MAAMN,aAAaO,QAAQ,UAC1C3C,EAAQyC,GAAoB,GAClC,EAAKP,cAAclC,IAnBF,EAsBnBgC,MAAQ,WACN,IAAMhC,EAAQ,EAAK4C,MAAM5C,MACzBA,EAAMS,KAAI,SAACC,GACTA,EAAK5B,MAAO,EACZ,EAAKK,cAAcuB,MAErB,EAAKwB,cAAclC,IA5BF,EA+BnB+B,QAAU,SAACtD,GACT,GAAIA,EAAJ,CACA,IAAMO,EAAK6D,KAAKC,MACV9C,EAAQ,EAAK4C,MAAM5C,MACzBA,EAAM+C,QAAQ,CAAC/D,GAAIA,EAAIP,KAAMA,EAAMK,MAAM,IACzC,EAAKoD,cAAclC,KApCF,EAuCnBN,SAAW,SAACV,EAAIN,GACd,GAAIA,EAAJ,CACA,IAAMsB,EAAQ,EAAK4C,MAAM5C,MACzBA,EAAMS,KAAI,SAAAC,GAAI,OAAIA,EAAK1B,KAAOA,EAAK0B,EAAKjC,KAAQC,EAAU,QAC1D,EAAKwD,cAAclC,KA3CF,EA8CnBV,WAAa,SAACN,GAUZgE,OAAOC,QAAQ,2BATE,WACf,IACMC,EADQ,EAAKN,MAAM5C,MACFyB,QAAO,SAAAf,GAAI,OAAIA,EAAK1B,KAAOA,KAClDkE,EAASzC,KAAI,SAACC,EAAMyC,GAClBzC,EAAK0C,MAAQD,KAEf,EAAKjB,cAAcgB,GAGuBG,IAxD3B,EA2DnBlE,cAAgB,SAACH,GACf,IAAMgB,EAAQ,EAAK4C,MAAM5C,MACzBA,EAAMS,KAAI,SAAAC,GAAI,OAAIA,EAAK1B,KAAOA,EAAK0B,EAAK5B,MAAQ4B,EAAK5B,KAAO,QAC5D,EAAKoD,cAAclC,IA9DF,EAiEnBD,QAAU,SAACC,EAAOsD,EAAYC,GAC5B,MAAkBvD,EAAMwD,OAAOF,EAAY,GAApCG,EAAP,oBACAzD,EAAMwD,OAAOD,EAAU,EAAGE,GAC1B,EAAKvB,cAAclC,IAlEnB,EAAK4C,MAAQ,CACX5C,MAAO,IAHQ,E,qDAOnB,WACE0D,KAAKlB,Y,oBA+DP,WAEE,IAAMxC,EAAQ0D,KAAKd,MAAM5C,MAExB,OACC,qBAAKnB,UAAU,QAAf,SACE,sBAAKA,UAAU,eAAf,UACE,uCACA,cAAC,EAAD,CAASkD,QAAS2B,KAAK3B,QAASC,MAAO0B,KAAK1B,QAC5C,cAAC,EAAD,CAAahC,MAAO0D,KAAKd,MAAM5C,QAC7BA,EAAMuB,OACN,cAAC,EAAD,CAAUvB,MAAOA,EAAOV,WAAYoE,KAAKpE,WAAYH,cAAeuE,KAAKvE,cAAeO,SAAUgE,KAAKhE,SAAUK,QAAS2D,KAAK3D,UAE/H,8D,GArFQ4D,aCMLC,EARH,WACV,OACE,qBAAK/E,UAAU,MAAf,SACC,cAAC,EAAD,OCHLgF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.edf6814a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport TaskDelete from './TaskDelete';\r\n\r\nconst TaskItem = (props) => {\r\n  const [edit, setEdit] = useState(false);\r\n  const [newName, setNewName] = useState(props.task.name);\r\n  const [style, setStyle] = useState('');\r\n\r\n  const onCheck = () =>{\r\n    props.setTaskStatus(props.task.id);\r\n  }\r\n\r\n  const onSave = () => {\r\n    setEdit(false); \r\n    props.editTask(props.task.id, newName);\r\n  }\r\n\r\n  const onReset = () => {\r\n    setEdit(false)\r\n  }\r\n\r\n  const onDelete = () => {\r\n    props.deleteTask(props.task.id)\r\n  }\r\n\r\n  const onEdit = () => {\r\n    setEdit(!edit)\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setNewName(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"tasks__item task dropzone\">\r\n      <div className={`task__content ${style} ${props.task.done ? 'done' : ''}`} draggable=\"true\" >\r\n       {!edit && \r\n         <>\r\n          <div className=\"task__inner\">\r\n            <input name={props.task.id} type=\"checkbox\" onChange={onCheck} checked={props.task.done}/>\r\n            <h3>{props.task.name}</h3>\r\n             <h3>{props.task.done}</h3>\r\n\r\n          </div>\r\n          <div className=\"task__buttons\">\r\n            <button onClick={onDelete}>Delete</button>\r\n            <button onClick={onEdit}>Edit</button>\r\n          </div>\r\n         </>\r\n        }\r\n        \r\n        {edit && \r\n          <div className=\"task__edit\">\r\n            <input type=\"text\" value={newName} onChange={onChange} />\r\n            <button onClick={onSave}>Save</button>\r\n            <button onClick={onReset}>Reset</button>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskItem;\r\n  ","import TaskItem from './TaskItem';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst queryAttr = \"data-rbd-drag-handle-draggable-id\";\r\n\r\nconst TaskList = (props) => {\r\n\r\n  const onDragEnd = result => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    props.reorder(props.tasks, result.source.index, result.destination.index);\r\n  };\r\n\r\n  const onDragUpdate = update => { \r\n    if(!update.destination){\r\n      return;\r\n    }\r\n    const draggableId = update.draggableId;\r\n    const destinationIndex = update.destination.index;\r\n\r\n    const domQuery = `[${queryAttr}='${draggableId}']`;\r\n    const draggedDOM = document.querySelector(domQuery);\r\n\r\n    if (!draggedDOM) {\r\n      return;\r\n    }\r\n  };\r\n\r\n\treturn (\r\n    <DragDropContext onDragEnd={onDragEnd} >\r\n      <Droppable droppableId=\"droppable\">\r\n        {(provided, snapshot) => (\r\n          <div\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            className=\"tasks__list\"\r\n          >\r\n            {props.tasks.map((item, index) => (\r\n              <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      className=\"tasks__container\"\r\n                    >\r\n                      <TaskItem key={item.id} task={item} deleteTask={props.deleteTask} setTaskStatus={props.setTaskStatus} editTask={props.editTask} move={props.move}/>\r\n                    </div>\r\n                  )}\r\n              </Draggable>\r\n            ))}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  ); \r\n}\r\n\r\nexport default TaskList;","import { useState, useEffect } from 'react';\r\n\r\nconst TaskDiagram = (props) => {\r\n\r\n  const [done, setDone] = useState(0);\r\n\r\n  const barStyle = {\r\n    width: `${done}%`\r\n  }\r\n\r\n  useEffect(() => {\r\n    const allTasks = props.tasks.length || 1;\r\n    const readyTasks = (props.tasks.filter(item => item.done === true )).length;\r\n    const percent = Math.round((readyTasks * 100) / allTasks);\r\n    setDone(percent);\r\n  });\r\n\r\n  return (\r\n    <div className=\"tasks__diagram diagram\">\r\n      <div className=\"diagram__field\">\r\n      <div className='diagram__bar' style={barStyle}>\r\n        <span className='diagram_caption'>{done}% <br /> done</span>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskDiagram;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst TaskNew = (props) => {\r\n  const [name, setName] = useState(\"\"); \r\n\r\n  const onChange = e => {\r\n    setName(e.target.value)\r\n  }\r\n\r\n  const onAdd = () => { \r\n    props.addTask(name);\r\n    setName(\"\"); \r\n  }\r\n\r\n  const onReset = () => {\r\n    props.reset()\r\n  }\r\n\r\n  return (\r\n    <div className=\"tasks__add\">\r\n      <input type=\"text\" value={name} onChange={onChange}  placeholder=\"Type new task...\" />\r\n      <div className='tasks__control'>\r\n        <button onClick={onAdd}>Add</button>\r\n        <button onClick={onReset}>Reset</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskNew;\r\n\r\n","import { Component } from 'react';\r\nimport TaskList from './TaskList';\r\nimport TaskReset from './TaskReset';\r\nimport TaskDiagram from './TaskDiagram';\r\nimport TaskNew from './TaskNew';\r\n\r\nclass Tasks extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      tasks: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.initial();\r\n  }\r\n\r\n  updateStorage = (tasks) => {\r\n    this.setState({tasks: tasks});\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));  \r\n  }\r\n\r\n  initial = () => {\r\n    const storage = JSON.parse(localStorage.getItem('tasks'))\r\n    const tasks = storage ? storage : [];\r\n    this.updateStorage(tasks);\r\n  }\r\n\r\n  reset = () => {\r\n    const tasks = this.state.tasks;\r\n    tasks.map((item) => {\r\n      item.done = false \r\n      this.setTaskStatus(item);\r\n    })\r\n    this.updateStorage(tasks);\r\n  }\r\n\r\n  addTask = (name) => {\r\n    if(!name) return;\r\n    const id = Date.now();\r\n    const tasks = this.state.tasks; \r\n    tasks.unshift({id: id, name: name, done: false});\r\n    this.updateStorage(tasks);\r\n  }\r\n\r\n  editTask = (id, newName) => {\r\n    if(!newName) return;\r\n    const tasks = this.state.tasks;\r\n    tasks.map(item => item.id === id ? item.name =  newName : null); \r\n    this.updateStorage(tasks);\r\n  }\r\n\r\n  deleteTask = (id) => {\r\n    const doDelete = () => {\r\n      const tasks = this.state.tasks;\r\n      const newTasks = tasks.filter(item => item.id !== id);\r\n      newTasks.map((item, i) =>{\r\n        item.order = i;\r\n      });\r\n      this.updateStorage(newTasks);\r\n    }\r\n\r\n    window.confirm(\"Do you want to delete?\") && doDelete();\r\n  }\r\n\r\n  setTaskStatus = (id) => {\r\n    const tasks = this.state.tasks;\r\n    tasks.map(item => item.id === id ? item.done = !item.done : null);\r\n    this.updateStorage(tasks);\r\n  }\r\n \r\n  reorder = (tasks, startIndex, endIndex) => {\r\n    const [removed] = tasks.splice(startIndex, 1);\r\n    tasks.splice(endIndex, 0, removed);\r\n    this.updateStorage(tasks);\r\n  }\r\n\r\n  render(){\r\n\r\n    const tasks = this.state.tasks;\r\n\r\n     return (\r\n      <div className=\"tasks\">\r\n        <div className=\"tasks__panel\">\r\n          <h1>Tasks</h1>\r\n          <TaskNew addTask={this.addTask} reset={this.reset} />\r\n          <TaskDiagram tasks={this.state.tasks}/> \r\n          { tasks.length ? \r\n            <TaskList tasks={tasks} deleteTask={this.deleteTask} setTaskStatus={this.setTaskStatus} editTask={this.editTask} reorder={this.reorder}/>\r\n          :\r\n            <p>You have no tasks...</p> \r\n         }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tasks;\r\n","import { Component, useState, useEffect } from 'react';\nimport './App.css';\nimport Tasks from './components/Tasks';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n     <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}