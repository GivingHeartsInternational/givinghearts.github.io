{"version":3,"sources":["app/dataSlice.js","components/TaskItem.js","components/TaskList.js","components/TaskDiagram.js","components/TaskNew.js","components/Tasks.js","App.js","app/store.js","index.js"],"names":["initialState","tasks","JSON","parse","localStorage","getItem","taskSlice","createSlice","name","reducers","addTask","state","action","unshift","payload","setItem","stringify","editTask","map","item","id","newName","deleteTask","filter","setTaskStatus","done","resetTasksStatuses","reorderTasks","splice","startIndex","removed","endIndex","actions","TaskItem","props","useState","edit","setEdit","task","setNewName","style","dispatch","useDispatch","className","draggable","type","onChange","checked","onClick","window","confirm","value","e","target","TaskList","useSelector","onDragEnd","result","destination","source","index","droppableId","provided","snapshot","droppableProps","ref","innerRef","draggableId","toString","draggableProps","dragHandleProps","move","placeholder","TaskDiagram","setDone","barStyle","width","useEffect","allTasks","length","readyTasks","percent","Math","round","drawDiagram","TaskNew","setName","Date","now","Tasks","App","store","configureStore","reducer","taskReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97501feb.chunk.js","sourcesContent":["import { createAsynsThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n\ttasks: JSON.parse(localStorage.getItem('tasks')) ?? []\r\n}\r\n\r\nexport const taskSlice = createSlice({\r\n\tname: 'tasks',\r\n\tinitialState,\r\n\treducers: {\r\n\t\taddTask(state, action) {\r\n\t\t\tstate.tasks.unshift(action.payload);\r\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(state.tasks));  \r\n\t\t},\r\n\t\teditTask(state, action) {\r\n\t\t\tstate.tasks.map(item => item.id === action.payload.id ? item.name =  action.payload.newName : null);\r\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(state.tasks));\r\n\t\t},\r\n\t\tdeleteTask(state, action) {\r\n\t\t\tstate.tasks = state.tasks.filter(item => item.id !== action.payload);\r\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(state.tasks));\r\n\t\t},\r\n\t\tsetTaskStatus(state, action) {\r\n\t\t\tstate.tasks.map(item => item.id === action.payload ? item.done = !item.done : null);\r\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(state.tasks)); \r\n\t\t},\r\n\t\tresetTasksStatuses(state) {\r\n\t    state.tasks.map((item) => { item.done = false })\r\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(state.tasks)); \r\n\t\t},\r\n\t\treorderTasks(state, action) {\r\n\t    const [removed] = state.tasks.splice(action.payload.startIndex, 1);\r\n\t    state.tasks.splice(action.payload.endIndex, 0, removed);\r\n\t    localStorage.setItem('tasks', JSON.stringify(state.tasks)); \r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport const { addTask, editTask, deleteTask, setTaskStatus, reorderTasks, resetTasksStatuses } = taskSlice.actions; \r\nexport default taskSlice.reducer","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setTaskStatus, editTask, deleteTask } from '../app/dataSlice';\r\n\r\nconst TaskItem = (props) => {\r\n  const [edit, setEdit] = useState(false);\r\n  const [newName, setNewName] = useState(props.task.name);\r\n  const [style, setStyle] = useState(''); \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onCheck = () =>{\r\n    dispatch(setTaskStatus(props.task.id))\r\n  }\r\n\r\n  const onSave = () => {\r\n    setEdit(false); \r\n    if(!newName) return;\r\n    dispatch(editTask({id: props.task.id, newName: newName}))\r\n  }\r\n\r\n  const onCancel = () => {\r\n    setEdit(false)\r\n  }\r\n\r\n  const onDelete = () => {\r\n    window.confirm(\"Do you want to delete?\") && dispatch(deleteTask(props.task.id));\r\n  }\r\n\r\n  const onEdit = () => {\r\n    setEdit(!edit)\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setNewName(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"tasks__item task dropzone\">\r\n      <div className={`task__content ${style} ${props.task.done ? 'done' : ''}`} draggable=\"true\" >\r\n       {!edit && \r\n         <>\r\n          <div className=\"task__inner\">\r\n            <input name={props.task.id} type=\"checkbox\" onChange={onCheck} checked={props.task.done}/>\r\n            <h3>{props.task.name}</h3>\r\n            <h3>{props.task.done}</h3>\r\n          </div>\r\n          <div className=\"task__buttons\">\r\n            <button onClick={onDelete}>Delete</button>\r\n            <button onClick={onEdit}>Edit</button>\r\n          </div>\r\n         </>\r\n        }\r\n        \r\n        {edit && \r\n          <div className=\"task__edit\">\r\n            <input type=\"text\" value={newName} onChange={onChange} />\r\n            <button onClick={onSave}>Save</button>\r\n            <button onClick={onCancel}>Cancel</button>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskItem;\r\n  ","import TaskItem from './TaskItem';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { reorderTasks } from '../app/dataSlice';\r\n\r\nconst queryAttr = \"data-rbd-drag-handle-draggable-id\";\r\n\r\nconst TaskList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector(state => state.tasks.tasks);\r\n\r\n  const onDragEnd = result => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    dispatch(reorderTasks({startIndex: result.source.index, endIndex: result.destination.index}))\r\n  };\r\n\r\n  const onDragUpdate = update => { \r\n    if(!update.destination){\r\n      return;\r\n    }\r\n    const draggableId = update.draggableId;\r\n    const destinationIndex = update.destination.index;\r\n\r\n    const domQuery = `[${queryAttr}='${draggableId}']`;\r\n    const draggedDOM = document.querySelector(domQuery);\r\n\r\n    if (!draggedDOM) {\r\n      return;\r\n    }\r\n  };\r\n\r\n\treturn (\r\n    <DragDropContext onDragEnd={onDragEnd} >\r\n      <Droppable droppableId=\"droppable\">\r\n        {(provided, snapshot) => (\r\n          <div\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            className=\"tasks__list\"\r\n          >\r\n            {props.tasks.map((item, index) => (\r\n              <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      className=\"tasks__container\"\r\n                    >\r\n                      <TaskItem key={item.id} task={item} move={props.move}  />\r\n                    </div>\r\n                  )}\r\n              </Draggable>\r\n            ))}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  ); \r\n}\r\n\r\nexport default TaskList;","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst TaskDiagram = (props) => {\r\n\r\n  const [done, setDone] = useState(0);\r\n\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector(state => state.tasks.tasks);\r\n\r\n  const barStyle = {\r\n    width: `${done}%`\r\n  }\r\n\r\n  const drawDiagram = () => {\r\n    const allTasks = tasks.length || 1;\r\n    const readyTasks = (tasks.filter(item => item.done === true )).length;\r\n    const percent = Math.round((readyTasks * 100) / allTasks);\r\n    setDone(percent);\r\n  }\r\n\r\n  useEffect(() => {\r\n    drawDiagram()\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tasks__diagram diagram\">\r\n      <div className=\"diagram__field\">\r\n      <div className='diagram__bar' style={barStyle}>\r\n        <span className='diagram_caption'>{done}% <br /> done</span>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskDiagram;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addTask, resetTasksStatuses } from '../app/dataSlice';\r\n \r\nconst TaskNew = (props) => {\r\n  const [name, setName] = useState(\"\"); \r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = e => {\r\n    setName(e.target.value)\r\n  }\r\n\r\n  const onAdd = () => { \r\n    if(!name) return;\r\n    const id = Date.now();\r\n    dispatch(addTask({name: name, id: id, done: false }))\r\n    setName(\"\"); \r\n  }\r\n\r\n  const onReset = () => {\r\n    dispatch(resetTasksStatuses());\r\n  }\r\n\r\n  return (\r\n    <div className=\"tasks__add\">\r\n      <input type=\"text\" value={name} onChange={onChange}  placeholder=\"Type new task...\" />\r\n      <div className='tasks__control'>\r\n        <button onClick={onAdd}>Add</button>\r\n        <button onClick={onReset}>Reset</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskNew;\r\n\r\n","import TaskList from './TaskList';\r\nimport TaskDiagram from './TaskDiagram';\r\nimport TaskNew from './TaskNew';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst Tasks  = () => {\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector(state => state.tasks.tasks);\r\n\r\n  return(\r\n    <div className=\"tasks\">\r\n      <div className=\"tasks__panel\">\r\n        <h1>Tasks</h1>\r\n        <TaskNew />\r\n         <TaskDiagram /> \r\n        { tasks.length ? \r\n          <TaskList tasks={tasks}  />\r\n        :\r\n          <p>You have no tasks...</p> \r\n       }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import { Component, useState, useEffect } from 'react';\nimport './App.css';\nimport Tasks from './components/Tasks';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n     <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport taskReducer from './dataSlice';\r\n\r\nexport const store = configureStore({\r\n\treducer: {\r\n\t\ttasks: taskReducer\r\n\t}\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}