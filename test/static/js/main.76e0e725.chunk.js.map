{"version":3,"sources":["components/Users/UserItem.js","app/dataSlice.js","components/Users/UserList.js","components/Posts/PostItem.js","components/Posts/PostPopupForm.js","components/Posts/PostAdd.js","components/Posts/PostList.js","components/Posts/PostDelete.js","components/Posts/PostEdit.js","components/Comments/CommentItem.js","components/Comments/CommentList.js","components/Posts/PostPage.js","App.js","app/store.js","index.js"],"names":["UserItem","props","className","user","name","username","email","address","zipcode","city","street","suite","phone","website","company","catchPhrase","bs","to","id","fetchUsers","createAsyncThunk","a","fetch","then","res","json","response","fetchPostsByUserId","userId","fetchPostById","postId","fetchCommentsByPostId","addPost","post","method","body","JSON","stringify","headers","editPost","data","deletePost","dataSlice","createSlice","initialState","users","posts","comments","loading","reducers","setLoading","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","alert","shift","map","filter","actions","UserList","dispatch","useDispatch","useSelector","useEffect","PostItem","title","PostPopupForm","useState","showForm","setShowForm","setPost","oldPost","onChangeData","e","target","value","closeForm","editPostData","Object","keys","length","addPostData","onClick","onSubmit","preventDefault","type","placeholder","required","onChange","rows","PostAdd","PostList","match","params","uid","PostDelete","PostEdit","CommentItem","comment","CommentList","PostPage","App","exact","path","component","store","configureStore","reducer","dataReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76e0e725.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\n\r\nconst UserItem  = (props) => {\r\n\treturn(\r\n\t\t<div className='users__item'>\r\n\t\t\t<table>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td className='title'>Name:</td>\r\n\t\t\t\t\t\t<td>{props.user.name}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td className='title'>Username:</td>\r\n\t\t\t\t\t\t<td>{props.user.username}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td className='title'>Email:</td>\r\n\t\t\t\t\t\t<td>{props.user.email}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td className='title'>Address:</td>\r\n\t\t\t\t\t\t<td>{`${props.user.address.zipcode}, ${props.user.address.city}, st. ${props.user.address.street}, ${props.user.address.suite}`}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td className='title'>Phone:</td>\r\n\t\t\t\t\t\t<td>{props.user.phone}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td className='title'>Website:</td>\r\n\t\t\t\t\t\t<td>{props.user.website}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td className='title'>Company:</td>\r\n\t\t\t\t\t\t<td>{`\"${props.user.company.name}\", ${props.user.company.catchPhrase}. /n ${props.user.company.bs}`}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t\t<tfoot>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<Link to={`/user/${props.user.id}/posts`}>Posts</Link>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tfoot>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default UserItem;\r\n ","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n\tusers: [],\r\n\tposts: [],\r\n\tcomments: [],\r\n\tpost: {},\r\n  loading: true\r\n}\r\n\r\n// fetch users\r\nexport const fetchUsers = createAsyncThunk(\r\n\t'data/fetchUsers',\r\n  async () => {\r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/users`).then(res => res.json());\r\n    return response;\r\n  }\r\n)\r\n\r\n// fetch posts\r\nexport const fetchPosts = createAsyncThunk(\r\n\t'data/fetchPosts',\r\n  async () => {\r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts`).then(res => res.json());\r\n    return response;\r\n  }\r\n)\r\n\r\n// fetch posts by user id\r\nexport const fetchPostsByUserId = createAsyncThunk(\r\n\t'data/fetchPostsByUserId',\r\n  async (userId) => {\r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`).then(res => res.json());\r\n    return response;\r\n  }\r\n)\r\n\r\n// fetch post by id\r\nexport const fetchPostById = createAsyncThunk(\r\n\t'data/fetchPostById',\r\n  async (postId) => {\r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`).then(res => res.json());\r\n    return response;\r\n  }\r\n)\r\n\r\n// fetch comments by post id\r\nexport const fetchCommentsByPostId = createAsyncThunk(\r\n\t'data/fetchCommentsByPostId',\r\n  async (postId) => {\r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`).then(res => res.json());\r\n    return response;\r\n  }\r\n)\r\n\r\n// add post\r\nexport const addPost = createAsyncThunk(\r\n  'data/addPost',\r\n  async (post) => {\r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(post),\r\n      headers: {\r\n        'Content-type': 'application/json; charset=UTF-8',\r\n      },\r\n    }).then(res => res.json());\r\n    return response;\r\n  }\r\n)\r\n\r\n// edit post\r\nexport const editPost = createAsyncThunk(\r\n  'data/editPost',\r\n  async (data) => {\r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${data.postId}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(data.post),\r\n      headers: {\r\n        'Content-type': 'application/json; charset=UTF-8',\r\n      },\r\n    }).then(res => res.json());\r\n    return response;\r\n  }\r\n)\r\n \r\n// delete post\r\nexport const deletePost = createAsyncThunk(\r\n  'data/deletePost',\r\n  async (postId) => {\r\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`, {\r\n      method: 'DELETE',\r\n    }).then(res => res.json());\r\n    return postId;\r\n  }\r\n)\r\n\r\nexport const dataSlice = createSlice({\r\n  name: 'data',\r\n  initialState,\r\n  reducers: {\r\n    setLoading(state, action) {\r\n      state.loading = action.payload;\r\n  }\r\n},\r\n  extraReducers: (builder) => {\r\n    builder\r\n       //fetch users\r\n      .addCase(fetchUsers.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchUsers.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.users = action.payload;\r\n      })\r\n\r\n      //fetch posts by user id\r\n      .addCase(fetchPostsByUserId.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchPostsByUserId.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.posts = action.payload;\r\n      })\r\n\r\n      //fetch post by id\r\n      .addCase(fetchPostById.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchPostById.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.post = action.payload;\r\n      })\r\n\r\n      //fetch comments by post id\r\n      .addCase(fetchCommentsByPostId.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchCommentsByPostId.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.comments = action.payload;\r\n      })\r\n\r\n      //add post \r\n      .addCase(addPost.fulfilled, (state, action) => {\r\n\r\n        // some logic for real API\r\n        alert('Post added: (in case of the real API) \\n' + JSON.stringify(action.payload, null, 2));\r\n        state.posts.shift(action.payload)\r\n      })\r\n\r\n      //edit post\r\n      .addCase(editPost.fulfilled, (state, action) => {\r\n\r\n        // some logic for real API\r\n        alert('Post edited: (in case of the real API) \\n' + JSON.stringify(action.payload, null, 2));\r\n        state.posts = state.posts.map(post => post.id === action.payload.id ? {...action.payload } : post)\r\n      })\r\n\r\n      //delete post\r\n      .addCase(deletePost.fulfilled, (state, action) => {\r\n\r\n        // some logic for real API\r\n        alert('Post deleted (in case of the real API)');\r\n        state.posts = state.posts.filter(post => post.id != action.payload); \r\n      });\r\n  },\r\n});\r\n\r\nexport const { setLoading } = dataSlice.actions; \r\n\r\nexport default dataSlice.reducer;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport UserItem from './UserItem';\r\n\r\nimport { fetchUsers } from '../../app/dataSlice';\r\n\r\nconst UserList = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst users = useSelector(state => state.data.users)\r\n\tconst loading = useSelector(state => state.data.loading)\r\n\r\n\tuseEffect(() => {\r\n\t\t// Fetch users\r\n\t\tdispatch(fetchUsers());\r\n\t}, []);\r\n\r\n\treturn (\r\n\r\n\t\t<div className='users'>\r\n\t\t\t<h2>Users</h2>\r\n\r\n\t\t\t{ loading && <p>Loading...</p> }\r\n\r\n\t\t\t{ users && !loading && users.map(user => (\r\n\t\t\t\t<UserItem key={user.id} user={user} />\r\n\t\t\t))}\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default UserList;\r\n\r\n","import { Link } from 'react-router-dom';\r\n\r\nconst PostItem  = (props) => {\r\n\treturn(\r\n\t\t<div className='posts__item'>\r\n\t\t\t<h4>{props.post.title}</h4>\r\n\t\t\t<p>{props.post.body}</p>\r\n\t\t\t<Link to={`/user/${props.post.userId}/post/${props.post.id}`}>Details</Link>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PostItem;\r\n\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PostPopupForm = (props) => {\r\n\r\n\tconst [showForm, setShowForm] = useState(false);\r\n\tconst [post, setPost] = useState({});\r\n\r\n\t// Get current post data for 'edit post' form\r\n\tconst oldPost = useSelector(state => state.data.post)\r\n\r\n\tconst onSubmit = (e) => {\r\n\t\te.preventDefault(); \r\n\r\n\t\t// Clear input fields if \"add post\" form\r\n\t\tprops.addPostData && setPost({title: '', body: ''});\r\n\r\n\t\t// Send post data to \"edit post\" or \"add post\" component\r\n\t\tprops.addPostData && props.addPostData(post)\r\n\t\tprops.editPostData && props.editPostData(post)\r\n\t\t\r\n\t\tcloseForm();\r\n\t}\r\n\r\n\t// Change input fields data\r\n\tconst onChangeData = (e) => {\r\n\t\tsetPost( post => {\r\n\t\t  return { ...post, [e.target.name]: e.target.value}\r\n\t\t})\r\n\t}\r\n\r\n\tconst closeForm = () => {\r\n\t\tsetShowForm(false);\t\t\r\n\t}\r\n\r\n\tconst openForm = () => {\r\n\t\tsetShowForm(true);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\t// Initialize state: current post data for \"edit post\" form, empty post for \"add post\" form \r\n\t\tprops.editPostData && !Object.keys(post).length && setPost(oldPost)\r\n\t\tprops.addPostData && !Object.keys(post).length && setPost({title: '', body: ''})\r\n\t});\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<button onClick={openForm} className='btn'>{props.title}</button>\r\n\t\t\t{showForm && \r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className='popup'>\r\n\t\t\t\t\t\t<h3>{props.title}</h3>\r\n\t\t\t\t\t\t<form onSubmit={onSubmit} method=\"post\">\r\n\t\t\t\t\t\t\t<input type=\"text\" name=\"title\" placeholder=\"title*\" value={post.title} required=\"required\" onChange={onChangeData} />\r\n\t\t\t\t\t\t\t<textarea rows=\"8\" name=\"body\" placeholder=\"body*\" value={post.body} required=\"required\" onChange={onChangeData} />\r\n\t\t\t\t\t\t\t<input type=\"submit\" value=\"Send\" className='btn' />\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div> \r\n\t\t \t\t\t<div className=\"overlay\" onClick={closeForm}></div>\r\n\t\t \t\t</>\r\n\t\t \t}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default PostPopupForm;","import PostPopupForm from './PostPopupForm';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPost } from '../../app/dataSlice';\r\n\r\nconst PostAdd = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const addPostData = (post) => {\r\n    dispatch(addPost({...post, userId: props.userId}))\r\n  } \r\n\r\n\treturn (\r\n\t\t<PostPopupForm title='Add Post' addPostData={addPostData} />\r\n\t);\r\n}\r\n\r\nexport default PostAdd;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchPostsByUserId } from '../../app/dataSlice';\r\n\r\nimport PostItem from './PostItem';\r\nimport PostAdd from './PostAdd';\r\n\r\nconst PostList = (props) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst posts = useSelector(state => state.data.posts)\r\n\tconst loading = useSelector(state => state.data.loading)\r\n\r\n\tuseEffect(() => {\r\n\t\t// Fetch posts by user id\r\n\t\tdispatch(fetchPostsByUserId(props.match.params.uid));\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className='posts'>\r\n\t\t\t<h2>Posts</h2>\r\n\t\t\t<PostAdd userId={props.match.params.uid}/>\r\n\r\n\t\t \t{ loading && <p>Loading...</p> }\r\n\r\n\t\t\t{posts && !loading && posts.map(post => (\r\n\t\t\t\t<PostItem key={post.id} post={post} />\r\n\t\t\t))}\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PostList;","import { useDispatch } from 'react-redux';\r\nimport { deletePost } from '../../app/dataSlice';\r\n\r\nconst PostDelete = (props) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst deletePostData = (post) => {\r\n    dispatch(deletePost(props.postId))\r\n  } \r\n\r\n\treturn (\r\n\t\t<button onClick={deletePostData} className='btn'>Delete Post</button>\r\n\t);\r\n}\r\n\r\nexport default PostDelete;","import PostPopupForm from './PostPopupForm';\r\nimport { useDispatch } from 'react-redux';\r\nimport { editPost } from '../../app/dataSlice';\r\n\r\nconst PostEdit = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const editPostData = (post) => {\r\n    dispatch(editPost({post: post, postId: props.postId}))\r\n  } \r\n\r\n\treturn (\r\n\t\t<PostPopupForm title='Edit Post' editPostData={editPostData} />\r\n\t);\r\n}\r\n\r\nexport default PostEdit;","const CommentItem  = (props) => {\r\n\treturn(\r\n\t\t<div className='comments__item'>\r\n\t\t\t<h4>{props.comment.name}</h4>\r\n\t\t\t<p>{props.comment.body}</p>\r\n\t\t\t<i>{props.comment.email}</i>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CommentItem;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchCommentsByPostId, setLoading } from '../../app/dataSlice';\r\n\r\nimport CommentItem from './CommentItem';\r\n\r\nconst CommentList = (props) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst comments = useSelector(state => state.data.comments)\r\n\tconst loading = useSelector(state => state.data.loading)\r\n\r\n\tuseEffect(() => {\r\n\t\t// Fetch comments by post id\r\n\t\tdispatch(setLoading(false));\r\n\t\tdispatch(fetchCommentsByPostId(props.postId));\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className='comments'>\r\n\t\t\t<h3>Comments</h3>\r\n\r\n\t\t\t{ loading && <p>Loading...</p> }\r\n\r\n\t\t\t{comments && !loading && comments.map(comment => (\r\n\t\t\t\t<CommentItem key={comment.id} comment={comment} />\r\n\t\t\t))}\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CommentList;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchPostById } from '../../app/dataSlice';\r\n\r\nimport PostDelete from './PostDelete';\r\nimport PostEdit from './PostEdit';\r\nimport CommentList from '../Comments/CommentList';\r\n\r\nconst PostPage = (props) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst post = useSelector(state => state.data.post)\r\n\tconst loading = useSelector(state => state.data.loading)\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(fetchPostById(props.match.params.id));\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className='post'>\r\n\t\t\t<p>Post #{props.match.params.id}</p>\r\n\r\n\t\t\t{ loading && <p>Loading...</p> }\r\n\t \r\n\t\t\t{ post && !loading &&\r\n\t\t\t\t<>\r\n\t\t\t\t\t<h4>{post.title}</h4>\r\n\t\t\t\t\t<p>{post.body}</p>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\r\n\t\t\t<CommentList postId={props.match.params.id}/> \r\n\r\n\t\t\t<PostEdit postId={props.match.params.id} />\r\n\t\t\t<PostDelete postId={props.match.params.id} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PostPage;","import React from 'react';\nimport './App.css';\nimport UserList from './components/Users/UserList';\nimport PostList from './components/Posts/PostList';\nimport PostPage from './components/Posts/PostPage';\n\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path='/' component={() => <Redirect to=\"/users\"/>} />\n      <Route path='/users/' component={UserList} />\n      <Route path='/user/:uid/posts' component={PostList} />\n      <Route path='/user/:uid/post/:id' component={PostPage} />\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport dataReducer from './dataSlice';\n\nexport const store =  configureStore({\n  reducer: {\n    data: dataReducer\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n "],"sourceRoot":""}